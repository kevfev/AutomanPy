syntax = "proto3";
import "automanlib_wrappers.proto";
import "automanlib_classes.proto";

/*****
This .proto file defins the rpc service and the messages sent
and received by the various rpc method calls. 
*****/


/*****
This service is a prototype of the Estimation functionality of
AutoMan only. 
RPC methods:

KillServer 
		This method shuts the rpc server down
	parameters:
		None
	returns:
		ServerStatusResponse
			Indicates the current status of the server, "KILLED" if the
			method was successful

RegisterAdapter 
		Registers a crowdsource adapter with one of the RPC workers. To be 
		used when submitting jobs
	parameters:
		AdapterCredentials 
	returns:
		ServerStatusResponse
			Indicates whether the adapter was added successfully or not,
			SUCCESS if it was successful, otherwise FAILED

ServerStatus 
		Reports the status of the server
	parameters:
		None 
	returns:
		ServerStatusResponse
			Indicates the current status of the server, either "RUNNING" or 
			"KILLED"


SubmitTask 
		Submits a task to the AutoMan server to post to the crowdsource back-end
	parameters:
		AutomanTask 
	returns:
		TaskResponse
			A response from the Automan server on the submitted task
			If the response code is VALID, the 
			task was completed successfully and one of task_outcome will be set depending
			on the respective task.
			If the response code was ERROR, an error occured and the err_code and err_msg
			fields will be set.
			If the response code was EXCEPTION, an exception occured and the excep_code
			and excep_msg fields will be set.

*****/
service PyautomanPrototype {
	rpc KillServer(Empty) returns (ServerStatusResponse) {}
	rpc SubmitTask(AutomanTask) returns (TaskResponse) {}
	rpc ServerStatus(Empty) returns (ServerStatusResponse) {}
	rpc RegisterAdapter(AdapterCredentials) returns (ServerStatusResponse) {}
}


/*
This message class is a wrapper for the different types of 
tasks that can be submitted 
*/
message AutomanTask{
	oneof task_type{
		EstimateTask estimate = 1;
		MultiestimateTask multiestimate = 2;
		FreetextTask freetext = 3;
		FreetextDistTask freetext_dist = 4;
		RadioTask radio = 5;
		RadioDistTask radio_dist = 6;
		CheckboxTask checkbox = 7;
		CheckboxDistTask checkbox_dist = 8;
	}
	int32 timeout = 9;
}

message AutomanOutcome{
	oneof task_outcome{
		Empty empty_outcome=1;
		EstimateOutcome estimate_outcome = 2;
		MultiestimateOutcome multiestimate_outcome = 3;
		RadioOutcome radio_outcome = 4;
		RadioDistOutcome radio_dist_outcome = 5;
		FreetextOutcome freetext_outcome = 6;
		FreetextDistOutcome freetext_dist_outcome = 7;
		CheckboxOutcome checkbox_outcome = 8;
		CheckboxDistOutcome checkbox_dist_outcome = 9;
	}
}


/*
This message class is the server response to a submitted task
fields:
return_code 				The type of response from the server

*_outcome 					* is replaced by est, mest, free, etc. from the oneof field. The outcome
							of the AutoMan task, set if return_code is VALID

err_msg 					A message about the type of error that occured, set if return_code is 
							ERROR

err_code 					A code representing the type of error that occured, set if return_code is 
							ERROR

excep_msg 					A message about the type of exception that occured, set if return_code is 
							EXCEPTION

excep_code 					A code representing the type of exception that occured, set if return_code is 
							EXCEPTION
*/
message TaskResponse{
	enum TaskReturnCode{
		UNDEFINED_RESP_CODE = 0;
		VALID = 1;
		ERROR = 2;
		EXCEPTION = 3;
	} 
	enum ExceptionCode{
		UNDEFINED_EXCPTION_CODE = 0;
	}
	enum ErrorCode{
		UNDEFINED_ERROR_CODE = 0;
		NO_CREDENTIALS_REGISTERED = 1;
	}

	TaskReturnCode return_code = 1;
	AutomanOutcome outcome = 2;
	ExceptionCode excep_code = 3;
	ErrorCode err_code = 4;
	string err_msg = 5;
	string excep_msg = 6;
}

/*
This message class is the server response to registering an adapter
fields:
return_code 				Indicates the result of an operation by the server.
							Codes:
								RUNNING - server is running (in response to ServerStatus RPC call)
								KILLED 	- server is killed (in response to ServerStatus RPC call)
								SUCCESS - adapter registered successfully (in response to RegisterAdapter RPC call)
								KILLED 	- adapter failed to register (in response to RegisterAdapter RPC call)
*/
message ServerStatusResponse{
	enum StatReturnCode{
		UNDEFINED_STATUS_CODE = 0;
		RUNNING = 1;
		KILLED = 2;
		SUCCESS = 3;
		FAILED = 4;
	} 
	StatReturnCode return_code = 1;
}

message Empty{
	
}